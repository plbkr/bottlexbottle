"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStylesForCell = exports.RowHeightUtils = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _predicate = require("../../services/predicate");

/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var cellPaddingsToClassMap = {
  s: 'euiDataGridRowCell--paddingSmall',
  m: '',
  l: 'euiDataGridRowCell--paddingLarge'
};
var fontSizesToClassMap = {
  s: 'euiDataGridRowCell--fontSizeSmall',
  m: '',
  l: 'euiDataGridRowCell--fontSizeLarge'
};

function getNumberFromPx(style) {
  return style ? parseInt(style.replace('px', ''), 10) : 0;
} // So that we use lineCount options we should know exactly row height which allow to show defined line count.
// For this we should know paddings and line height. Because of this we should compute styles for cell with grid styles


var RowHeightUtils = /*#__PURE__*/function () {
  function RowHeightUtils() {
    (0, _classCallCheck2.default)(this, RowHeightUtils);
    (0, _defineProperty2.default)(this, "styles", {});
    (0, _defineProperty2.default)(this, "fakeCell", document.createElement('div'));
  }

  (0, _createClass2.default)(RowHeightUtils, [{
    key: "computeStylesForGridCell",
    value: function computeStylesForGridCell(gridStyles) {
      this.fakeCell.className = "\n      euiDataGridRowCell \n      ".concat(cellPaddingsToClassMap[gridStyles.cellPadding], " \n      ").concat(fontSizesToClassMap[gridStyles.fontSize], "\n    ");
      document.body.appendChild(this.fakeCell);
      var allStyles = getComputedStyle(this.fakeCell);
      this.styles = {
        paddingTop: allStyles.paddingTop,
        paddingBottom: allStyles.paddingBottom,
        lineHeight: allStyles.lineHeight
      };
      document.body.removeChild(this.fakeCell);
    }
  }, {
    key: "calculateHeightForLineCount",
    value: function calculateHeightForLineCount(lineCount) {
      var paddingTop = getNumberFromPx(this.styles.paddingTop);
      var paddingBottom = getNumberFromPx(this.styles.paddingBottom);
      var lineHeight = getNumberFromPx(this.styles.lineHeight);
      return Math.ceil(lineCount * lineHeight + paddingTop + paddingBottom);
    }
  }, {
    key: "getCalculatedHeight",
    value: function getCalculatedHeight(heightOption, defaultHeight) {
      if ((0, _predicate.isObject)(heightOption)) {
        if (heightOption.lineCount) {
          return this.calculateHeightForLineCount(heightOption.lineCount);
        }

        if (heightOption.height) {
          return Math.max(heightOption.height, defaultHeight);
        }
      }

      if (heightOption && (0, _predicate.isNumber)(heightOption)) {
        return Math.max(heightOption, defaultHeight);
      }

      return defaultHeight;
    }
  }]);
  return RowHeightUtils;
}();

exports.RowHeightUtils = RowHeightUtils;

var getStylesForCell = function getStylesForCell(rowHeightsOptions, rowIndex) {
  var initialHeight = rowHeightsOptions.rowHeights && rowHeightsOptions.rowHeights[rowIndex];

  if (!initialHeight) {
    initialHeight = rowHeightsOptions.defaultHeight;
  }

  if ((0, _predicate.isObject)(initialHeight) && initialHeight.lineCount) {
    return {
      WebkitLineClamp: initialHeight.lineCount,
      display: '-webkit-box',
      WebkitBoxOrient: 'vertical',
      height: '100%',
      overflow: 'hidden',
      flexGrow: 1,
      wordBreak: 'break-all'
    };
  }

  return {
    height: '100%',
    overflow: 'hidden',
    flexGrow: 1,
    wordBreak: 'break-all'
  };
};

exports.getStylesForCell = getStylesForCell;